// <auto-generated>This code was generated by Instagile.</auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using The;
using The.Attributes;
using The.Documents;
using The.Search;

namespace Repro.Model
{
	///<summary>A specification which can be used to retrieve Entities from the database</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public sealed class EntitySpecification : EntitySpecificationBase<Entity>
	{
		private readonly EntitySpecification _AsEntity;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "active" property</summary>
		public readonly BooleanSpecification active;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "createdBy" property</summary>
		public readonly StringSpecification createdBy;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "createdOn" property</summary>
		public readonly InstantSpecification createdOn;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "ID" property</summary>
		public readonly GUIDSpecification ID;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "modifiedBy" property</summary>
		public readonly StringSpecification modifiedBy;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "modifiedOn" property</summary>
		public readonly InstantSpecification modifiedOn;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "Text" property</summary>
		public readonly StringSpecification Text;

		///<summary>Provides a sub-specification for applying criteria to the Entity's "Attribute" property</summary>
		public readonly IntegerSpecification Attribute;

		///<summary>Specifies that the Entity is a Entity, and provides a sub-specification for applying criteria to it</summary>
		public EntitySpecification AsEntity()
		{
			base.Add(e => e is Entity, e => !(e is Entity));
			return _AsEntity;
		}

		///<summary>Specifies a new set of criteria which are an alternative to the main criteria</summary>
		///<returns>The specification for the alternative criteria</returns>
		public EntitySpecification Or()
		{
			return base.AddDisjoin(new EntitySpecification(CreateQuery));
		}

		///<summary>Accepts a new set of criteria which are an alternative to the main criteria</summary>
		///<returns>The current specification</returns>
		public EntitySpecification Or(EntitySpecification subspec)
		{
			return base.AddDisjoin(subspec);
		}

		///<summary>Specifies a new set of criteria which are required in addition to the main criteria</summary>
		///<returns>The specification for the alternative criteria</returns>
		public EntitySpecification And()
		{
			return base.AddConjoin(new EntitySpecification(CreateQuery));
		}

		///<summary>Accepts a new set of criteria which are required in addition to the main criteria</summary>
		///<returns>The current specification</returns>
		public EntitySpecification And(EntitySpecification subspec)
		{
			return base.AddConjoin(subspec);
		}

		///<summary>Specifies a new set of criteria to falsify in addition to the main criteria</summary>
		///<returns>The specification for the alternative criteria</returns>
		public EntitySpecification Not()
		{
			return base.AddNegation(new EntitySpecification(CreateQuery));
		}
    
		///<summary>Specifies a new set of criteria to falsify in addition to the main criteria</summary>
		///<returns>The current specification</returns>
		public EntitySpecification Not(EntitySpecification subspec)
		{
			return base.AddNegation(subspec);
		}
    
		///<summary>Specifies that the reference is null.</summary>
		public EntitySpecification IsNull()
		{
			base.AddOrReplaceSingle(e => e == null, e => e != null);
			return this;
		}
    
		///<summary>Specifies that the reference matches a criteria tree.</summary>
		public EntitySpecification Matches(ICriteriaTree<Entity> tree)
		{
			base.Add(tree);
			return this;
		}

		internal EntitySpecification(Func<IEntityContext, IQueryable<Entity>> createQuery, bool setNonNull = false) : base(createQuery)
		{
			_AsEntity = this;
			active = new BooleanSpecification();
			createdBy = new StringSpecification();
			createdOn = new InstantSpecification();
			ID = new GUIDSpecification();
			modifiedBy = new StringSpecification();
			modifiedOn = new InstantSpecification();
			Text = new StringSpecification();
			Attribute = new IntegerSpecification();

			if (setNonNull) base.AddOrReplaceSingle(e => e != null, e => e == null);
		}

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public EntitySpecification() : this(Entity.Query) { }

		protected override IEnumerable<ISubspecification<Entity>> Subspecifications
		{
			get
			{
				var subspecs = new List<ISubspecification<Entity>>();

				subspecs.Add(new PropertySubspecification<Entity, bool>(active, (Entity e) => e.kernel.active));
				subspecs.Add(new PropertySubspecification<Entity, string>(createdBy, (Entity e) => e.kernel.createdBy));
				subspecs.Add(new PropertySubspecification<Entity, DateTimeOffset>(createdOn, (Entity e) => e.kernel.createdOn));
				subspecs.Add(new PropertySubspecification<Entity, Guid>(ID, (Entity e) => e.ID));
				subspecs.Add(new PropertySubspecification<Entity, string>(modifiedBy, (Entity e) => e.kernel.modifiedBy));
				subspecs.Add(new PropertySubspecification<Entity, DateTimeOffset>(modifiedOn, (Entity e) => e.kernel.modifiedOn));
				subspecs.Add(new PropertySubspecification<Entity, string>(Text, (Entity e) => e.Text));
				subspecs.Add(new PropertySubspecification<Entity, int>(Attribute, (Entity e) => e.Attribute));


				return subspecs;
			}
		}
	}

	public partial class Entity
	{
		/// <summary>Retrieve Entitys by building a typed specification</summary>
		public static EntitySpecification Specify() => new EntitySpecification(Entity.Query);

        /// <summary>Retrieve Entitys by building a typed specification</summary>
		public static EntitySpecification Specify(Func<IEntityContext, IQueryable<Entity>> createQuery) => new EntitySpecification(createQuery);
	}
}
