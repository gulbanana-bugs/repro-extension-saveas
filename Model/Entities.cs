// <auto-generated>This code was generated by Instagile.</auto-generated>
#nullable enable
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using The;
using The.Attributes;
using The.Components;
using The.Documents;
using The.Entities;
using The.Linq;
using The.Persistence;
using The.Relationships;

namespace Repro.Model
{

	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	public abstract class EntityGen : EntityBase<EntityProps, EntityReport>
	{
		protected EntityGen(IEntityInfo metadata, IEntityContext context, IEntityInitialiser initialiser) : base(metadata, context, initialiser, new EntityPropsFactory()) { }

		[DataMember]
		public int Attribute
		{
			get => ((IntegerProperty)kernel.Attributes[8]).Value;
			set => ((IntegerProperty)kernel.Attributes[8]).Value = value;
		}

		protected internal string GetText() => $"<{kernel.Metadata.Caption} '{ID}'>";
	}

	public partial class Entity : EntityGen
	{
		/// <summary>The meta-information and factory methods for Entity entities</summary>
		public static readonly Entities.EntityInfo Metadata = Entities.EntityInfo.Instance;

		public Entity(IEntityContext context) : base(Metadata, context, CreatingEntityInitialiser.Instance) { }

		internal Entity(IEntityInfo metadata, IEntityContext context, IEntityInitialiser initialiser) : base(metadata, context, initialiser) {}

		/// <summary>Retrieve Entitys by LINQ query</summary>
		public static IQueryable<Entity> Query(IEntityContext context) => context.Services.Persistence.CreateQuery<Entity>(Metadata, context);

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Entity GetByID(IEntityContext context, Guid id, params RelationshipInfo[] include) => context.Services.Persistence.GetByID<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0]);

        /// <summary>Retrieve the Entity with a specific ID, optionally including related entities, counts and tables</summary>
		public static Entity GetByID(IEntityContext context, Guid id, RelationshipInfo[] includeRelationships, IEntityInfo[] includeCounts, IEntityInfo[] includeEntireTables) => context.Services.Persistence.GetByID<Entity>(Metadata, context, id, includeRelationships, includeCounts, includeEntireTables);

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, params RelationshipInfo[] include)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0]);
        }

        /// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, CancellationToken cancellationToken, params RelationshipInfo[] include)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0], cancellationToken);
        }

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities, counts and tables</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, RelationshipInfo[] includeRelationships, IEntityInfo[] includeCounts, IEntityInfo[] includeEntireTables, CancellationToken? cancellationToken = default)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, includeRelationships, includeCounts, includeEntireTables, cancellationToken);
        }

		/// <summary>Retrieve all Entitys</summary>
		public static IFrozenQueryable<Entity> GetAll(IEntityContext context) =>
			context.Services.Persistence.GetAll<Entity>(Metadata, context);

		/// <summary>Retrieve all Entitys</summary>
		public static Task<IFrozenQueryable<Entity>> GetAllAsync(IEntityContext context, CancellationToken? cancellationToken = default) =>
			context.Services.Persistence.GetAllAsync<Entity>(Metadata, context, cancellationToken);

	}

    public struct EntityPropsFactory : IPropsFactory<EntityProps, EntityReport>
    {
        public EntityProps CreateProps(EntityKernel kernel) => new EntityProps(kernel);
        public EntityReport CreateReport(EntityKernel kernel) => new EntityReport(kernel);
    }

	public partial class EntityProps
	{
		private readonly EntityKernel _Entity;

		public EntityProps(EntityKernel entity)
		{
			_Entity = entity;
		}

		public BooleanProperty active => (BooleanProperty)_Entity.Attributes[0];

		public StringProperty createdBy => (StringProperty)_Entity.Attributes[1];

		public InstantProperty createdOn => (InstantProperty)_Entity.Attributes[2];

		public GUIDProperty ID => (GUIDProperty)_Entity.Attributes[3];

		public StringProperty modifiedBy => (StringProperty)_Entity.Attributes[4];

		public InstantProperty modifiedOn => (InstantProperty)_Entity.Attributes[5];

		public StringProperty Text => (StringProperty)_Entity.Attributes[6];

		public VersionProperty version => (VersionProperty)_Entity.Attributes[7];

		public IntegerProperty Attribute => (IntegerProperty)_Entity.Attributes[8];
	}

	public class EntityReport : EntityReportBase
	{
		public EntityReport(EntityKernel? entity) : base(entity) {}

		public new Entity? Entity => base.Entity?.Wrapper as Entity;

		public string Attribute
		{
			get
			{
				if (base.Entity == null) return "";

				var p = (IntegerProperty)base.Entity.Attributes[8];
				return p.ToString();
			}
		}
	}
}

namespace Repro.Model.Legacy
{

	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	public abstract class EntityGen : EntityBase<EntityProps, EntityReport>
	{
		protected EntityGen(IEntityInfo metadata, IEntityContext context, IEntityInitialiser initialiser) : base(metadata, context, initialiser, new EntityPropsFactory()) { }

		[DataMember]
		public int Attribute
		{
			get => ((IntegerProperty)kernel.Attributes[8]).Value;
			set => ((IntegerProperty)kernel.Attributes[8]).Value = value;
		}
	}

	public partial class Entity : EntityGen
	{
		/// <summary>The meta-information and factory methods for Entity entities</summary>
		public static readonly Entities.EntityInfo Metadata = Entities.EntityInfo.Instance;

		public Entity(IEntityContext context) : base(Metadata, context, CreatingEntityInitialiser.Instance) { }

		internal Entity(IEntityInfo metadata, IEntityContext context, IEntityInitialiser initialiser) : base(metadata, context, initialiser) {}

		/// <summary>Retrieve Entitys by LINQ query</summary>
		public static IQueryable<Entity> Query(IEntityContext context) => context.Services.Persistence.CreateQuery<Entity>(Metadata, context);

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Entity GetByID(IEntityContext context, Guid id, params RelationshipInfo[] include) => context.Services.Persistence.GetByID<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0]);

        /// <summary>Retrieve the Entity with a specific ID, optionally including related entities, counts and tables</summary>
		public static Entity GetByID(IEntityContext context, Guid id, RelationshipInfo[] includeRelationships, IEntityInfo[] includeCounts, IEntityInfo[] includeEntireTables) => context.Services.Persistence.GetByID<Entity>(Metadata, context, id, includeRelationships, includeCounts, includeEntireTables);

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, params RelationshipInfo[] include)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0]);
        }

        /// <summary>Retrieve the Entity with a specific ID, optionally including related entities</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, CancellationToken cancellationToken, params RelationshipInfo[] include)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, include, new IEntityInfo[0], new IEntityInfo[0], cancellationToken);
        }

		/// <summary>Retrieve the Entity with a specific ID, optionally including related entities, counts and tables</summary>
		public static Task<Entity> GetByIDAsync(IEntityContext context, Guid id, RelationshipInfo[] includeRelationships, IEntityInfo[] includeCounts, IEntityInfo[] includeEntireTables, CancellationToken? cancellationToken = default)
        {
            return context.Services.Persistence.GetByIDAsync<Entity>(Metadata, context, id, includeRelationships, includeCounts, includeEntireTables, cancellationToken);
        }

		/// <summary>Retrieve all Entitys</summary>
		public static IFrozenQueryable<Entity> GetAll(IEntityContext context) =>
			context.Services.Persistence.GetAll<Entity>(Metadata, context);

		/// <summary>Retrieve all Entitys</summary>
		public static Task<IFrozenQueryable<Entity>> GetAllAsync(IEntityContext context, CancellationToken? cancellationToken = default) =>
			context.Services.Persistence.GetAllAsync<Entity>(Metadata, context, cancellationToken);

	}

    public struct EntityPropsFactory : IPropsFactory<EntityProps, EntityReport>
    {
        public EntityProps CreateProps(EntityKernel kernel) => new EntityProps(kernel);
        public EntityReport CreateReport(EntityKernel kernel) => new EntityReport(kernel);
    }

	public partial class EntityProps
	{
		private readonly EntityKernel _Entity;

		public EntityProps(EntityKernel entity)
		{
			_Entity = entity;
		}

		public BooleanProperty active => (BooleanProperty)_Entity.Attributes[0];

		public StringProperty createdBy => (StringProperty)_Entity.Attributes[1];

		public InstantProperty createdOn => (InstantProperty)_Entity.Attributes[2];

		public GUIDProperty ID => (GUIDProperty)_Entity.Attributes[3];

		public StringProperty modifiedBy => (StringProperty)_Entity.Attributes[4];

		public InstantProperty modifiedOn => (InstantProperty)_Entity.Attributes[5];

		public StringProperty Text => (StringProperty)_Entity.Attributes[6];

		public VersionProperty version => (VersionProperty)_Entity.Attributes[7];

		public IntegerProperty Attribute => (IntegerProperty)_Entity.Attributes[8];
	}

	public class EntityReport : EntityReportBase
	{
		public EntityReport(EntityKernel? entity) : base(entity) {}

		public new Entity? Entity => base.Entity?.Wrapper as Entity;

		public string Attribute
		{
			get
			{
				if (base.Entity == null) return "";

				var p = (IntegerProperty)base.Entity.Attributes[8];
				return p.ToString();
			}
		}
	}
}
